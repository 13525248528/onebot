(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{386:function(e,t,v){"use strict";v.r(t);var s=v(25),_=Object(s.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"反向-websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反向-websocket"}},[e._v("#")]),e._v(" 反向 WebSocket")]),e._v(" "),v("p",[e._v("CQHTTP 启动后，作为客户端向用户配置的反向 WebSocket URL 建立连接。连接建立后，将一直保持连接，并根据连接的 URL 不同，提供 API 调用或事件推送服务。通过 WebSocket 消息发送的数据全部使用 JSON 格式。")]),e._v(" "),v("h2",{attrs:{id:"连接请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连接请求"}},[e._v("#")]),e._v(" 连接请求")]),e._v(" "),v("p",[e._v("根据配置的不同，连接用户提供的 URL 的客户端有三种：API 客户端、Event 客户端和 Universal 客户端。API 客户端提供 API 调用服务；Event 客户端提供事件推送服务；Universal 客户端"),v("strong",[e._v("在一条连接上")]),e._v("同时提供两种服务。")]),e._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),v("p",[e._v("只要服务器能够正确区分，API 客户端和 Event 客户端可以向同一个 URL 建立连接，但这是两条连接，和 Universal 客户端不同。")])]),e._v(" "),v("p",[e._v("各客户端建立连接的方式相同，以 API 客户端为例，假设设置了 API URL 为 "),v("code",[e._v("ws://127.0.0.1:8080/ws/api")]),e._v("，则连接请求如下：")]),e._v(" "),v("div",{staticClass:"language-http extra-class"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[v("span",{pre:!0,attrs:{class:"token request-line"}},[v("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /ws/api HTTP/1.1")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" 127.0.0.1:8080\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" Upgrade\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Upgrade:")]),e._v(" websocket\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("X-Self-ID:")]),e._v(" 10001000\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("X-Client-Role:")]),e._v(" API\n...\n")])])]),v("p",[e._v("请求头中的 "),v("code",[e._v("X-Self-ID")]),e._v(" 表示当前正在建立连接的机器人 QQ 号；"),v("code",[e._v("X-Client-Role")]),e._v(" 表示当前正在建立连接的客户端类型，对于 Event 客户端和 Universal 客户端，这里分别是 "),v("code",[e._v("Event")]),e._v(" 和 "),v("code",[e._v("Universal")]),e._v("。")]),e._v(" "),v("p",[e._v("连接建立后，使用方式同 "),v("RouterLink",{attrs:{to:"/specs/communication/ws.html"}},[e._v("正向 WebSocket")]),e._v("。")],1),e._v(" "),v("h2",{attrs:{id:"断线重连"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#断线重连"}},[e._v("#")]),e._v(" 断线重连")]),e._v(" "),v("p",[e._v("当由于各种意外情况，连接断开时，CQHTTP 将以配置中指定的时间间隔不断尝试重连，直到再次连接成功。")]),e._v(" "),v("h2",{attrs:{id:"相关配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关配置"}},[e._v("#")]),e._v(" 相关配置")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("配置项")]),e._v(" "),v("th",[e._v("默认值")]),e._v(" "),v("th",[e._v("说明")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[v("code",[e._v("ws_reverse.enable")])]),e._v(" "),v("td",[v("code",[e._v("true")])]),e._v(" "),v("td",[e._v("是否启用反向 WebSocket")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("ws_reverse.url")])]),e._v(" "),v("td",[e._v("空")]),e._v(" "),v("td",[e._v("反向 WebSocket API、Event、Universal 共用 URL")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("ws_reverse.api_url")])]),e._v(" "),v("td",[e._v("空")]),e._v(" "),v("td",[e._v("反向 WebSocket API URL，如果为空，则使用 "),v("code",[e._v("ws_reverse.url")]),e._v(" 指定的值")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("ws_reverse.event_url")])]),e._v(" "),v("td",[e._v("空")]),e._v(" "),v("td",[e._v("反向 WebSocket Event URL，如果为空，则使用 "),v("code",[e._v("ws_reverse.url")]),e._v(" 指定的值")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("ws_reverse.use_universal_client")])]),e._v(" "),v("td",[v("code",[e._v("false")])]),e._v(" "),v("td",[e._v("是否使用 Universal 客户端")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("ws_reverse.reconnect_interval")])]),e._v(" "),v("td",[v("code",[e._v("3000")])]),e._v(" "),v("td",[e._v("反向 WebSocket 客户端断线重连间隔，单位毫秒")])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);