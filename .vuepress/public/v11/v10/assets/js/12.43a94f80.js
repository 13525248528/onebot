(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{364:function(e,t,s){"use strict";s.r(t);var _=s(25),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"通信方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通信方式"}},[e._v("#")]),e._v(" 通信方式")]),e._v(" "),s("p",[e._v("目前支持三种通信方式：")]),e._v(" "),s("ul",[s("li",[e._v("插件作为 HTTP 服务端，提供 API 和数据文件获取服务")]),e._v(" "),s("li",[e._v("插件作为 WebSocket 服务端，通过 "),s("code",[e._v("/api/")]),e._v(" 和 "),s("code",[e._v("/event/")]),e._v(" 两个接口分别提供 API 调用和事件推送服务")]),e._v(" "),s("li",[e._v("插件作为 WebSocket 客户端（称为「反向 WebSocket」），主动连接给定的 API 和事件上报地址，分别提供 API 调用服务和事件上报服务")])]),e._v(" "),s("p",[e._v("上面三种通信方式分别使用 "),s("code",[e._v("use_http")]),e._v("、"),s("code",[e._v("use_ws")]),e._v("、"),s("code",[e._v("use_ws_reverse")]),e._v(" 三个配置项来开关。")]),e._v(" "),s("p",[e._v("除了上述通信方式，还有通过 HTTP 上报事件，这是永远可用的，"),s("strong",[e._v("不受上面三个 "),s("code",[e._v("use_*")]),e._v(" 配置控制")]),e._v("，只要配置了 "),s("code",[e._v("post_url")]),e._v("，就会上报，并且处理响应数据。")]),e._v(" "),s("p",[e._v("下面详细介绍上面的三种通信方式的适用场景和使用方法，你可以根据需要选择其一或者适当组合使用。")]),e._v(" "),s("h2",{attrs:{id:"插件作为-http-服务端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件作为-http-服务端"}},[e._v("#")]),e._v(" 插件作为 HTTP 服务端")]),e._v(" "),s("h3",{attrs:{id:"适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[e._v("#")]),e._v(" 适用场景")]),e._v(" "),s("p",[e._v("这是本插件最初支持的通信方式，也是使用起来最方便快捷的方式，适用于以下情况：")]),e._v(" "),s("ul",[s("li",[e._v("在本地初步测试使用 CKYU 和本插件，需要快速测试接口、查看接口返回的数据")]),e._v(" "),s("li",[e._v("运行 CKYU 的机器有公网 IP，或 CKYU 和业务代码运行在同一机器上")]),e._v(" "),s("li",[e._v("对于数据文件访问有需求")]),e._v(" "),s("li",[e._v("...")])]),e._v(" "),s("h3",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[e._v("#")]),e._v(" 使用方法")]),e._v(" "),s("p",[e._v("将 "),s("code",[e._v("use_http")]),e._v(" 配置为 "),s("code",[e._v("true")]),e._v("（默认即 "),s("code",[e._v("true")]),e._v("），然后通过 "),s("code",[e._v("host")]),e._v("、"),s("code",[e._v("port")]),e._v(" 来配置要监听的 IP 和端口（默认为 "),s("code",[e._v("0.0.0.0:5700")]),e._v("），启用插件后即可通过形如 "),s("code",[e._v("http://host:port/send_private_msg?user_id=1234567&message=hello")]),e._v(" 的 URL 来调用 API。")]),e._v(" "),s("p",[e._v("具体的 API 调用方法和 API 列表见 "),s("a",{attrs:{href:"API"}},[e._v("API 描述")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"插件作为-websocket-服务端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件作为-websocket-服务端"}},[e._v("#")]),e._v(" 插件作为 WebSocket 服务端")]),e._v(" "),s("h3",{attrs:{id:"适用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-2"}},[e._v("#")]),e._v(" 适用场景")]),e._v(" "),s("ul",[s("li",[e._v("运行 CKYU 的机器有公网 IP，或 CKYU 和业务代码运行在同一机器上")]),e._v(" "),s("li",[e._v("业务代码运行环境无法通过 HTTP 上报获得事件（例如浏览器中）")]),e._v(" "),s("li",[e._v("...")])]),e._v(" "),s("h3",{attrs:{id:"使用方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-2"}},[e._v("#")]),e._v(" 使用方法")]),e._v(" "),s("p",[e._v("将 "),s("code",[e._v("use_ws")]),e._v(" 配置为 "),s("code",[e._v("true")]),e._v("（默认 "),s("code",[e._v("false")]),e._v("），然后通过 "),s("code",[e._v("ws_host")]),e._v("、"),s("code",[e._v("ws_port")]),e._v(" 来配置要监听的 IP 和端口（默认为 "),s("code",[e._v("0.0.0.0:6700")]),e._v("），启用插件后即可通过 "),s("code",[e._v("ws://ws_host:ws_port/api/")]),e._v(" 接口来调用 API，通过 "),s("code",[e._v("ws://ws_host:ws_port/event/")]),e._v(" 来接收事件推送，通过 "),s("code",[e._v("ws://ws_host:ws_port/")]),e._v(" 接口来在同一条连接上调用 API 和接收事件推送（相当于 "),s("code",[e._v("/api/")]),e._v(" 和 "),s("code",[e._v("/event/")]),e._v(" 接口的合并，对接收到的数据可通过 "),s("code",[e._v("post_type")]),e._v(" 字段来判断是 API 响应还是事件）。")]),e._v(" "),s("p",[e._v("这两个接口的具体用法见 "),s("a",{attrs:{href:"WebSocketAPI"}},[e._v("WebSocket API 描述")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"插件作为-websocket-客户端（反向-websocket）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件作为-websocket-客户端（反向-websocket）"}},[e._v("#")]),e._v(" 插件作为 WebSocket 客户端（反向 WebSocket）")]),e._v(" "),s("h3",{attrs:{id:"适用场景-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-3"}},[e._v("#")]),e._v(" 适用场景")]),e._v(" "),s("ul",[s("li",[e._v("运行 CKYU 的机器没有公网 IP，且业务代码有公网 IP，或两者运行在同一机器上")]),e._v(" "),s("li",[e._v("...")])]),e._v(" "),s("h3",{attrs:{id:"使用方法-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法-3"}},[e._v("#")]),e._v(" 使用方法")]),e._v(" "),s("p",[e._v("在业务代码中启动 WebSocket 服务端，开启两个接口，分别用于 API 调用和事件上报（如果只需要一个功能，也可以只开一个），然后分别配置 "),s("code",[e._v("ws_reverse_api_url")]),e._v("、"),s("code",[e._v("ws_reverse_event_url")]),e._v(" 为上述两个接口的完整地址，例如 "),s("code",[e._v("ws://127.0.0.1:8765/api/")]),e._v("。再将 "),s("code",[e._v("use_ws_reverse")]),e._v(" 配置为 "),s("code",[e._v("true")]),e._v("（默认为 "),s("code",[e._v("false")]),e._v("），重启插件即可开启反向 WebSocket 服务。")]),e._v(" "),s("p",[e._v("插件会在特定的时候向指定的 URL 建立连接，并且在请求头中通过 "),s("code",[e._v("X-Self-ID")]),e._v(" 来表示当前正在建立连接的机器人 QQ 号，以及通过 "),s("code",[e._v("X-Client-Role")]),e._v(" 来表示当前正在建立连接的客户端类型，如：")]),e._v(" "),s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("X-Self-ID:")]),e._v(" 123456\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("X-Client-Role:")]),e._v(" Event\n")])])]),s("p",[e._v("其中，"),s("code",[e._v("X-Client-Role")]),e._v(" 可能为 "),s("code",[e._v("Event")]),e._v(" 和 "),s("code",[e._v("API")]),e._v("，分别对应事件上报和 API 的两个连接。"),s("code",[e._v("X-Client-Role")]),e._v(" 头的存在意味着你可以将 "),s("code",[e._v("ws_reverse_api_url")]),e._v(" 和 "),s("code",[e._v("ws_reverse_event_url")]),e._v(" 设置为相同的地址，或简单地使用 "),s("code",[e._v("ws_reverse_url")]),e._v(" 来配置共用地址即可，然后只需要在 WebSocket 后端对请求头进行判断即可知道是哪个账号的哪个客户端在连接。")]),e._v(" "),s("p",[e._v("除了使用 API 和 Event 双连接的方式，还可以通过将配置项 "),s("code",[e._v("ws_reverse_use_universal_client")]),e._v(" 设为 "),s("code",[e._v("true")]),e._v("（默认 "),s("code",[e._v("false")]),e._v("）来让插件"),s("strong",[e._v("只向 "),s("code",[e._v("ws_reverse_url")]),e._v(" 建立一条连接")]),e._v("，"),s("code",[e._v("X-Client-Role")]),e._v(" 为 "),s("code",[e._v("Universal")]),e._v("，API 和 Event 的数据均从这条连接上传输（相当于 API 和 Event 客户端的合并，对接收到的数据可通过 "),s("code",[e._v("post_type")]),e._v(" 字段来判断是 API 响应还是事件）。Universal 客户端单连接的使用方式和分开的 API 和 Event 完全一致，下面不在单独说明。")]),e._v(" "),s("p",[e._v("如果配置了 "),s("code",[e._v("access_token")]),e._v("，则在建立连接时，还会加入 "),s("code",[e._v("Authorization")]),e._v(" 请求头，例如：")]),e._v(" "),s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Authorization:")]),e._v(" Token kSLuTF2GC2Q4q4ugm3\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("X-Self-ID:")]),e._v(" 123456\n")])])]),s("blockquote",[s("p",[e._v("注意：这里本应该是 "),s("code",[e._v("Authorization: Bearer kSLuTF2GC2Q4q4ugm3")]),e._v("（和插件作为服务端的校验保持一致），但由于历史上的某次升级时忘记把这里的 "),s("code",[e._v("Token")]),e._v(" 改为 "),s("code",[e._v("Bearer")]),e._v("，并且如果现在修改可能会对已有代码造成破坏，因此决定保持为 "),s("code",[e._v("Token")]),e._v(" 不变。")])]),e._v(" "),s("h4",{attrs:{id:"api-调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-调用"}},[e._v("#")]),e._v(" API 调用")]),e._v(" "),s("p",[e._v("首先插件启用时会启动一个"),s("strong",[e._v("保持连接")]),e._v("的客户端用于连接 API 调用接口，即 "),s("code",[e._v("ws_reverse_api_url")]),e._v(" 指定的接口，一旦收到服务端发来的消息就会调用相应的 API 并返回调用结果。")]),e._v(" "),s("p",[e._v("API 的调用方式和插件作为 WebSocket 服务端的 "),s("code",[e._v("/api/")]),e._v(" 接口使用方式相同，见 "),s("a",{attrs:{href:"WebSocketAPI#api"}},[e._v("WebSocket API 描述的 "),s("code",[e._v("/api/")])]),e._v("，不同在于你的服务端必须在调用 API 后保持连接，以便下次调用。")]),e._v(" "),s("h4",{attrs:{id:"事件上报"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件上报"}},[e._v("#")]),e._v(" 事件上报")]),e._v(" "),s("p",[e._v("插件启动时会启动一个"),s("strong",[e._v("保持连接")]),e._v("的客户端用于连接事件上报接口，即 "),s("code",[e._v("ws_reverse_event_url")]),e._v(" 指定的接口，在后续接收到 CKYU 的事件时，会通过这个连接发送事件数据。发送事件数据格式和 HTTP POST 方式上报的完全一致，见 "),s("a",{attrs:{href:"Post#%E4%B8%8A%E6%8A%A5%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F"}},[e._v("上报数据格式")]),e._v("，事件列表见 "),s("a",{attrs:{href:"Post#%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8"}},[e._v("事件列表")]),e._v("。")]),e._v(" "),s("p",[e._v("与 HTTP 上报不同的是，这里上报不会对数据进行签名（即 HTTP 上报中的 "),s("code",[e._v("X-Signature")]),e._v(" 请求头在这里没有等价的东西），并且也不会处理响应数据。")]),e._v(" "),s("h3",{attrs:{id:"断线重连"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断线重连"}},[e._v("#")]),e._v(" 断线重连")]),e._v(" "),s("p",[e._v("可通过配置项 "),s("code",[e._v("ws_reverse_reconnect_interval")]),e._v(" 和 "),s("code",[e._v("ws_reverse_reconnect_on_code_1000")]),e._v(" 来配置反向 WebSocket 的断线重连机制，分别设置尝试重连的时间间隔，和是否在关闭码 1000 的情况下进行重连。")]),e._v(" "),s("p",[e._v("如果你的服务器重启时插件没有自动重连，建议尝试设置 "),s("code",[e._v("ws_reverse_reconnect_on_code_1000 = yes")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"websocket-的-api-调用响应顺序问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的-api-调用响应顺序问题"}},[e._v("#")]),e._v(" WebSocket 的 API 调用响应顺序问题")]),e._v(" "),s("p",[e._v("由于 WebSocket 的通信不像 HTTP 那样是固定的一来一回，而是一直保持连接，大多 WebSocket 框架都采用事件驱动的方式来提供接口。这就导致，在通过 WebSocket 进行"),s("strong",[e._v("连续")]),e._v(" API 调用时，很多情况下无法确切地知道插件返回的响应是对应哪次调用。因此插件现加入了 echo 机制，允许用户在调用 API 时在调用数据（JSON 对象）中加入一个 "),s("code",[e._v("echo")]),e._v(" 字段（数据类型任意），以标记此次调用，插件会在该调用的响应数据中将其原样返回。")]),e._v(" "),s("h3",{attrs:{id:"调用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用示例"}},[e._v("#")]),e._v(" 调用示例")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"action"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"send_private_msg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"params"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"user_id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"你好"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1648451782")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h3",{attrs:{id:"响应示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应示例"}},[e._v("#")]),e._v(" 响应示例")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"status"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ok"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"retcode"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token null keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1648451782")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);